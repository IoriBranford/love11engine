# LOVE Multiplatform GitLab CI

# Fill in the project info
variables:
        PROJECT: twinthunder
        PROJECT_TITLE: "Twin Thunder Trigger"
        PROJECT_TITLE_NOSPACE: "Twin_Thunder_Trigger"
        DESCRIPTION: "Twin-stick twin-ship shmup"
        COPYRIGHT: "Â© 2020 IoriBranford"
        APPLICATION_ID_BASE: "io.itch.ioribranford.twinthunder"
        LOVE_VERSION: "11.3"
        SCREEN_ORIENTATION: "landscape"
        VERSION: "${CI_COMMIT_REF_NAME}"
        GIT_DEPTH: "1"
        GIT_SUBMODULE_STRATEGY: recursive

stages:
        - build

image: alpine:latest

before_script:
        - apk add --update zip git

.debian:
        <<: &debian
                before_script:
                        - apt-get update
                        - apt-get install -y -qq zip git

.build-data: &build-data
        stage: build
        variables:
                GAME_ASSET: "${PROJECT}.love"
        script:
                - apk add wget xz
                - ./make-game.sh
        artifacts:
                name: "${PROJECT}-${VERSION}-data"
                paths:
                        - "${PROJECT}.love"

.build-windows: &build-windows
        <<: *debian
        image: tianon/wine
        stage: build
        variables:
                ARCH_BITS: "64"
                GAME_DIR: "${PROJECT_TITLE}"
        script:
                - apt-get install -y -qq wget
                - ./make-windows.sh
        cache:
                key: "${PROJECT}-win-${ARCH_BITS}"
                paths:
                        - "love-${LOVE_VERSION}-win${ARCH_BITS}"
                        - "bin"
                        - "rcedit-x64.exe"
        artifacts:
                name: "${PROJECT}-${VERSION}-win-${ARCH_BITS}"
                paths:
                        - "${PROJECT_TITLE}"

.build-linux: &build-linux
        <<: *debian
        stage: build
        image: debian:stretch-slim
        script:
                - apt-get install -y -qq file wget fuse libglib2.0-0
                - ./make-linux.sh
        cache:
                key: "${PROJECT}-linux-${ARCH}"
                paths:
                        - "love-${LOVE_VERSION}-${ARCH}.AppImage"
                        - "appimagetool"
                        - "*.deb"
        artifacts:
                name: "${PROJECT}-${VERSION}-linux-${ARCH}"
                paths:
                        - ${PROJECT_TITLE_NOSPACE}-${ARCH}.AppImage

osx:
        <<: *debian
        stage: build
        image: fzwoch/osxcross
        script:
                - apt-get install -y -qq wget
                - ./make-macosx.sh
        cache:
                key: "${PROJECT}-osx"
                paths:
                        - "love.app"
        artifacts:
                name: "${PROJECT}-${VERSION}-osx"
                paths:
                        - "${PROJECT_TITLE}.app"

data:
        <<: *build-data

win-64:
        <<: *build-windows

win-32:
        <<: *build-windows
        variables:
                ARCH_BITS: "32"

linux-x86_64:
        <<: *build-linux
        variables:
                ARCH: "x86_64"

linux-i686:
        <<: *build-linux
        image: i386/debian:stretch-slim
        variables:
                ARCH: "i686"
