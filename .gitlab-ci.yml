# LOVE Multiplatform GitLab CI

# Fill in the project info
variables:
        PROJECT: love11engine
        PROJECT_TITLE: "LOVE 11 Tiled Engine"
        PROJECT_TITLE_NOSPACE: "LOVE_11_Tiled_Engine"
        DESCRIPTION: "LOVE 11 Tiled Engine"
        COPYRIGHT: "Â© 2020 IoriBranford"
        APPLICATION_ID_BASE: "io.itch.ioribranford.love11engine"
        LOVE_VERSION: "11.3"
        SCREEN_ORIENTATION: "landscape"
        VERSION: "${CI_COMMIT_REF_NAME}"
        GIT_DEPTH: "1"
        GIT_SUBMODULE_STRATEGY: recursive

stages:
        - build

image: alpine:latest

before_script:
        - apk add --update git zip luajit

.debian:
        <<: &debian
                before_script:
                        - apt-get update
                        - apt-get install -y -qq git zip luajit

# variables:
#   GAME_ASSET: "filename of the output love package"
.build-data: &build-data
        stage: build
        script:
                - apk add wget xz
                - ./make-game.sh
        artifacts:
                name: "${PROJECT}-${VERSION}-data"
                paths:
                        - "${GAME_ASSET}"

# variables:
#   ARCH_BITS: "64 or 32"
#   GAME_DIR: "name of the output game folder"
.build-windows: &build-windows
        <<: *debian
        image: tianon/wine
        stage: build
        script:
                - apt-get install -y -qq wget xvfb
                - ./make-windows.sh
        cache:
                key: "${PROJECT}-win-${ARCH_BITS}"
                paths:
                        - "love-${LOVE_VERSION}-win${ARCH_BITS}"
                        - "bin"
                        - "rcedit-x64.exe"
        artifacts:
                name: "${PROJECT}-${VERSION}-win-${ARCH_BITS}"
                paths:
                        - "${PROJECT_TITLE}"

# variables:
#   ARCH: "target architecture"
.build-linux: &build-linux
        <<: *debian
        stage: build
        image: debian:stretch-slim
        script:
                - apt-get install -y -qq file wget fuse libglib2.0-0
                - ./make-linux.sh
        cache:
                key: "${PROJECT}-linux-${ARCH}"
                paths:
                        - "love-${LOVE_VERSION}-${ARCH}.AppImage"
                        - "appimagetool"
                        - "*.deb"
        artifacts:
                name: "${PROJECT}-${VERSION}-linux-${ARCH}"
                paths:
                        - ${PROJECT_TITLE_NOSPACE}-${ARCH}.AppImage

# variables:
#   CFBundleIdentifier: "${APPLICATION_ID_BASE} plus type of build if applicable e.g. 'demo'"
.build-osx: &build-osx
        <<: *debian
        stage: build
        image: fzwoch/osxcross
        variables:
                <<: &build-osx-variables
                        NSHumanReadableCopyright: "${COPYRIGHT}"
                        INSTALL_NAME_TOOL: x86_64-apple-darwin12-install_name_tool
        script:
                - apt-get install -y -qq wget
                - ./make-macosx.sh
        cache:
                key: "${PROJECT}-osx"
                paths:
                        - "love.app"
        artifacts:
                name: "${PROJECT}-${VERSION}-osx"
                paths:
                        - "${PROJECT_TITLE}.app"

data:
  <<: *build-data
  variables:
    GAME_ASSET: "${PROJECT}.love"

win-64:
  <<: *build-windows
  variables:
    ARCH_BITS: "64"

win-32:
  <<: *build-windows
  variables:
    ARCH_BITS: "32"

linux-x86_64:
  <<: *build-linux
  variables:
    ARCH: "x86_64"

linux-i686:
  <<: *build-linux
  image: i386/debian:stretch-slim
  variables:
    ARCH: "i686"

osx:
  <<: *build-osx
  variables:
    CFBundleIdentifier: "${APPLICATION_ID_BASE}"
    <<: *build-osx-variables
